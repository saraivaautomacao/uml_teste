unit Clientes;

interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, Mask, DBCtrls, Db, Variants, Buttons, ExtCtrls, Tabs, RxLookup, rxToolEdit,
  RXDBCtrl, DosMove, RXCtrls, ExtDlgs, Enter, ActnList, DBTables, jpeg,
  RxQuery, Grids, DBGrids;

type
  TFormClientes = class(TForm)
    Panel1: TPanel;
    sbtNovo: TSpeedButton;
    sbtGravar: TSpeedButton;
    sbtExcluir: TSpeedButton;
    sbtCancelar: TSpeedButton;
    sbtConsultar: TSpeedButton;
    sbtFechar: TSpeedButton;
    dsTemp: TDataSource;
    Panel2: TPanel;
    OpenPictureDialog1: TOpenPictureDialog;
    DBStatusLabel2: TDBStatusLabel;
    MREnter1: TMREnter;
    ActionList1: TActionList;
    Action1: TAction;
    Action2: TAction;
    Action3: TAction;
    Action4: TAction;
    Action5: TAction;
    Action6: TAction;
    Button3: TButton;
    CheckBox1: TCheckBox;
    Button4: TButton;
    Query1: TQuery;
    Button5: TButton;
    rxPesquisa: TRxQuery;
    DataSource1: TDataSource;
    rxPesquisanome: TStringField;
    rxPesquisaendereco: TStringField;
    DataSource2: TDataSource;
    DataSource3: TDataSource;
    Panel3: TPanel;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Label8: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    sbVerifica1: TSpeedButton;
    Label17: TLabel;
    Label18: TLabel;
    Label36: TLabel;
    Label40: TLabel;
    DBEdit2: TDBEdit;
    DBEdit3: TDBEdit;
    DBEdit4: TDBEdit;
    DBEdit5: TDBEdit;
    DBEdit8: TDBEdit;
    DBEdit9: TDBEdit;
    DBEdit10: TDBEdit;
    DBEdit11: TDBEdit;
    DBEdit12: TDBEdit;
    DBEdit13: TDBEdit;
    fldTipoCli: TRxDBLookupCombo;
    RxDBLookupCombo2: TRxDBLookupCombo;
    DBRadioGroup1: TDBRadioGroup;
    rgList: TRadioGroup;
    TabSet1: TTabSet;
    DBNavigator1: TDBNavigator;
    DBDateEdit2: TDBDateEdit;
    fldTotReg: TStaticText;
    Notebook1: TNotebook;
    gbObs: TGroupBox;
    DBMemo1: TDBMemo;
    gbFoto: TGroupBox;
    Image1: TImage;
    Button1: TButton;
    Button2: TButton;
    Button6: TButton;
    gbOutrosDados: TGroupBox;
    Label21: TLabel;
    GroupBox2: TGroupBox;
    Label37: TLabel;
    Label38: TLabel;
    Label39: TLabel;
    DBLookupComboBox2: TDBLookupComboBox;
    DBEdit14: TDBEdit;
    DBEdit27: TDBEdit;
    DBEdit31: TDBEdit;
    DBEdit32: TDBEdit;
    fldCodigo: TComboEdit;
    DBEdit1: TDBEdit;
    DBEdit15: TDBEdit;
    fldUf: TRxDBLookupCombo;
    fldMunicipio: TRxDBLookupCombo;
    DBEdit17: TDBEdit;
    DBGrid2: TDBGrid;
    Label41: TLabel;
    DBEdit21: TDBEdit;
    Panel4: TPanel;
    Label23: TLabel;
    Label25: TLabel;
    Label26: TLabel;
    Label27: TLabel;
    Label28: TLabel;
    Label29: TLabel;
    Label30: TLabel;
    Label31: TLabel;
    Label33: TLabel;
    Label34: TLabel;
    Label35: TLabel;
    Label20: TLabel;
    sbVerifica: TSpeedButton;
    Label24: TLabel;
    Label19: TLabel;
    Label32: TLabel;
    DBEdit18: TDBEdit;
    DBEdit19: TDBEdit;
    DBEdit20: TDBEdit;
    DBEdit22: TDBEdit;
    DBEdit23: TDBEdit;
    DBEdit24: TDBEdit;
    DBEdit25: TDBEdit;
    DBEdit28: TDBEdit;
    DBEdit29: TDBEdit;
    DBDateEdit1: TDBDateEdit;
    DBEdit7: TDBEdit;
    RxDBLookupCombo1: TRxDBLookupCombo;
    RxDBLookupCombo3: TRxDBLookupCombo;
    DBEdit6: TDBEdit;
    DBEdit16: TDBEdit;
    DBGrid1: TDBGrid;
    procedure DBNavigator1Click(Sender: TObject; Button: TNavigateBtn);
    procedure FormActivate(Sender: TObject);
    procedure TabSet1Change(Sender: TObject; NewTab: Integer;
      var AllowChange: Boolean);
    procedure FormShow(Sender: TObject);
    procedure dsTempDataChange(Sender: TObject; Field: TField);
    procedure rgListClick(Sender: TObject);
    procedure DBEdit29Exit(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure sbtFecharClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Action2Execute(Sender: TObject);
    procedure Action1Execute(Sender: TObject);
    procedure Action6Execute(Sender: TObject);
    procedure Action5Execute(Sender: TObject);
    procedure fldCodigoExit(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure DBEdit25Exit(Sender: TObject);
    procedure DBEdit11Exit(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure sbtGravarClick(Sender: TObject);
    procedure Button5Click(Sender: TObject);
    procedure DBEdit18Exit(Sender: TObject);
    procedure DBEdit18KeyPress(Sender: TObject; var Key: Char);
    procedure DBEdit2Exit(Sender: TObject);
    procedure sbVerifica1Click(Sender: TObject);
    procedure DBEdit2KeyPress(Sender: TObject; var Key: Char);
    procedure sbVerificaClick(Sender: TObject);
    procedure Button6Click(Sender: TObject);
  private
    { Private declarations }
    lValida: Boolean;
    Procedure Grava_Imagem_JPEG(Tabela: TTable; Campo: TBlobField;
      Foto: TImage; Dialog: TOpenPictureDialog);
    Procedure Le_Imagem_JPEG(Campo: TBlobField; Foto: TImage);
  public
    { Public declarations }
  end;

var
  FormClientes: TFormClientes;

implementation

uses rotinas, tipoCli, Dados, impcl, tipocli1, lkClientes, conhistclientes,
  lanavulso1, relfcliente, dados3, lancontas, Principal, captura, dados1;
{$R *.DFM}

Procedure TFormClientes.Le_Imagem_JPEG(Campo: TBlobField; Foto: TImage);
var
  BS: TBlobStream;
  MinhaImagem: TJPEGImage;
Begin
  if Campo.AsString <> '' Then
  Begin
    BS := TBlobStream.Create((Campo as TBlobField), BMREAD);
    MinhaImagem := TJPEGImage.Create;
    MinhaImagem.LoadFromStream(BS);
    Foto.Picture.Assign(MinhaImagem);
    BS.Free;
    MinhaImagem.Free;
  End
  Else
    Foto.Picture.LoadFromFile('\sge\limpa.jpg');
End;

Procedure TFormClientes.Grava_Imagem_JPEG(Tabela: TTable; Campo: TBlobField;
  Foto: TImage; Dialog: TOpenPictureDialog);
var
  BS: TBlobStream;
  MinhaImagem: TJPEGImage;
Begin
  Dialog.InitialDir := '\sge';
  Dialog.Execute;
  if Dialog.FileName <> '' Then
  Begin
    if not(Tabela.State in [dsEdit, dsInsert]) Then
      Tabela.Edit;
    BS := TBlobStream.Create((Campo as TBlobField), BMWRITE);
    MinhaImagem := TJPEGImage.Create;
    MinhaImagem.LoadFromFile(Dialog.FileName);
    MinhaImagem.SaveToStream(BS);
    Foto.Picture.Assign(MinhaImagem);
    BS.Free;
    MinhaImagem.Free;
    // Tabela.Post;
    // DBISaveChanges(Tabela.Handle);
  End;
End;

procedure TFormClientes.DBNavigator1Click(Sender: TObject;
  Button: TNavigateBtn);
begin
  Verifica(dsTemp);
  fldCodigo.Text := dmMod.tblClientesCodigo.Value;
end;

procedure TFormClientes.FormActivate(Sender: TObject);
begin
  If (dmMod.tblClientes.Eof) and (dmMod.tblClientes.Bof) Then
    Action1Execute(Sender);
end;

procedure TFormClientes.TabSet1Change(Sender: TObject; NewTab: Integer;
  var AllowChange: Boolean);
begin
  Notebook1.PageIndex := NewTab;
end;

procedure TFormClientes.FormShow(Sender: TObject);
begin
  sbVerifica.Down := false;
  CheckBox1.Checked := false;
  lValida := true;
  Inicializa(sbtNovo, sbtGravar, sbtExcluir, sbtCancelar, sbtConsultar);
  Notebook1.PageIndex := 0;
  dmMod.tblClit.Open;
  dmMod.tblClit.IndexName := 'Ind_Tipo';
  dsTemp.Enabled := true;
  dmMod.tblEmpresa.Open;
  dmMod.tblClientes.Filtered := true;
  dmMod.tblClientes.Filter := 'codigo<>99999';
  dmMod.tblClientes.Open;
  rxPesquisa.Close;
  // If dmMod.tblClientes.RecordCount<>0 Then
  dmMod.tblClientes.Last;
  dmMod.tblVend.Open;
  dmMod.tblVend.IndexName := 'Ind_nome';
  rgList.ItemIndex := 1;
  dmMod.tblCartao.Open;
  TabSet1.tabIndex := 0;
  dmMod.tblParam.Open;
  fldTotReg.Caption := 'Nº de Clientes Cadastrados: ' + IntToStr
    (TotalReg(dmMod.tblClientes) - 1);
  dmMod.tblClientes.Last;
  fldCodigo.Text := dmMod.tblClientesCodigo.Value;
  DBGrid1.visible := false;
  DBGrid2.visible := false;
  dmMod1.qryuf.Open;
  dmMod1.qryMunicipio.Open;
end;

procedure TFormClientes.dsTempDataChange(Sender: TObject; Field: TField);
begin
  Panel4.visible := dmMod.tblClientesTagFisica.Value;
  Verifica(dsTemp);
  Le_Imagem_JPEG(dmMod.tblClientesFoto, Image1);
end;

procedure TFormClientes.rgListClick(Sender: TObject);
begin

  dmMod.tblClientes.IndexName := '';
  If rgList.ItemIndex = 0 Then
    dmMod.tblClientes.IndexName := 'ind_nome'
  Else If (rgList.ItemIndex = 1) Then
    dmMod.tblClientes.IndexName := 'ind_Codigo'
  Else
  Begin
    If dmMod.tblClientesTagFisica.Value Then
      dmMod.tblClientes.IndexName := 'ind_cpf'
    Else
      dmMod.tblClientes.IndexName := 'ind_cnpj'
  End;
  dmMod.tblClientes.Last;
  fldCodigo.Text := dmMod.tblClientesCodigo.Value;
end;

procedure TFormClientes.DBEdit29Exit(Sender: TObject);
begin
  fldTipoCli.SetFocus;
end;

procedure TFormClientes.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  Geral := '';
  If FormClientes.Tag = 0 Then
  Begin
    SaidaForm(dmMod.tblClientes);
    CloseAll(dmMod, true, true);
  End
  Else
    Geral := dmMod.tblClientesCodigo.Value;
  SaidaForm(dmMod.tblClientes);
  dsTemp.Enabled := false;
  formlkClientes.Query1.Close;
  rxPesquisa.Close;
  dmMod1.qryuf.Close;
  dmMod1.qryMunicipio.Close;
end;

procedure TFormClientes.sbtFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TFormClientes.Button1Click(Sender: TObject);
Begin
  Grava_Imagem_JPEG(dmMod.tblClientes, dmMod.tblClientesFoto, Image1,
    OpenPictureDialog1);
  Le_Imagem_JPEG(dmMod.tblClientesFoto, Image1);
end;

procedure TFormClientes.Button2Click(Sender: TObject);
Begin
  Grava_Imagem_JPEG(dmMod.tblClientes, dmMod.tblClientesFoto, Image1,
    OpenPictureDialog1);
end;

procedure TFormClientes.Action2Execute(Sender: TObject);
Var
  Pesquisa: TQuery;
begin
  If (Sender As TAction).Tag = 3 Then
  Begin
    If not dmmod3.tbUsuarioPermitirExcluir.Value Then
    Begin
      Mensagem('Usuario nao tem permissao');
      Exit;
    End;
    Pesquisa := TQuery.Create(Application);
    Pesquisa.Databasename := 'estoque1';
    Pesquisa.Sql.Add(
      'Select * from tabreceber Where lkCliente=:Codigo And Baixa=' + QuotedStr
        ('N'));
    Pesquisa.Params[0].AsString := dmMod.tblClientesCodigo.Value;
    Pesquisa.Active := true;
    If Not Pesquisa.Eof Then
    Begin
      Mensagem('Cliente c/ débito pendente');
      Pesquisa.Active := false;
      Pesquisa.Free;
      Exit;
    End;
    Pesquisa.Active := false;
    Pesquisa.Free;
  End;
  If ((Sender As TAction).Tag = 2) Then
  Begin
    If ((dsTemp.Dataset).State In [dsInsert, dsEdit]) then
    Begin
      If Not lValida then
      Begin
        ShowMessage('CPF/CNPJ não habilitado');
        Exit;
      End;
      If dmMod.tblClientesNome.Value = Null Then
      Begin
        Mensagem('Campo nome está vazio');
        fldCodigo.SetFocus;
        Exit;
      End;
      If (dsTemp.Dataset).FieldByNAme('tagFisica').AsBoolean = true Then
  (dsTemp.Dataset)
        .FieldByNAme('Abrevia').AsString := AbreviaNomes(DBEdit18.Text)
      Else (dsTemp.Dataset)
        .FieldByNAme('Abrevia').AsString := AbreviaNomes(DBEdit2.Text);
      dmMod.tblClientesCodigo.Value := fldCodigo.Text;
    End;
  End;
  Atualiza(dsTemp.Dataset, (Sender As TAction).Tag);
  fldTotReg.Caption := 'Nº de Clientes Cadastrados: ' + IntToStr
    (TotalReg(dmMod.tblClientes) - 1);
  fldCodigo.Text := dmMod.tblClientesCodigo.Value;
end;

procedure TFormClientes.Action1Execute(Sender: TObject);
begin
  DBGrid1.visible := false;
  DBGrid2.visible := false;
  If formtipoCli.ShowModal = mrOk Then
  Begin
    With formtipoCli Do
    Begin
      If rgOrdem.ItemIndex = 0 Then
      Begin
        If RemoveChar(fldCpf.Text) <> '' Then
        Begin
          If dmMod.tblClientes.Locate('cpf', fldCpf.Text, []) Then
            Exit;

        End;
        If fldrg.Text <> '' Then
        Begin
          If dmMod.tblClientes.Locate('rg', fldrg.Text, []) Then
            Exit;
        End;
      End;
      If rgOrdem.ItemIndex = 1 Then
      Begin
        If RemoveChar(fldcnpj.Text) <> '' Then
        Begin
          If dmMod.tblClientes.Locate('cnpj', fldcnpj.Text, []) Then
            Exit;
        End;
      End;

    End;
    Atualiza(dsTemp.Dataset, 1);

    // fldCodigo.TExt:=StrZero(dmmod.tblClientesControle.Value,5);
    dmMod.tblClientesData.Value := Date;
    dmMod.tblClientesTagFisica.Value := formtipoCli.rgOrdem.ItemIndex = 0;
    dmMod.tblClientescpf.Value := formtipoCli.fldCpf.Text;
    dmMod.tblClientesrg.Value := formtipoCli.fldrg.Text;
    dmMod.tblClientescnpj.Value := formtipoCli.fldcnpj.Text;
    fldCodigo.Text := '';
    If formtipoCli.rgOrdem.ItemIndex = 0 Then
      DBEdit18.SetFocus
    Else
      DBEdit2.SetFocus;

  End;

end;

procedure TFormClientes.Action6Execute(Sender: TObject);
begin
  Close;
end;

procedure TFormClientes.Action5Execute(Sender: TObject);
begin

  If formlkClientes.ShowModal = mrOk Then
  Begin
    dmMod.tblClientes.Locate('codigo', Geral, []);
    fldCodigo.Text := Geral;
    If formtipoCli.rgOrdem.ItemIndex = 0 Then
      DBEdit18.SetFocus
    Else
      DBEdit2.SetFocus;
  End;
end;

procedure TFormClientes.fldCodigoExit(Sender: TObject);
begin
  If TipoString(fldCodigo.Text) Then
    fldCodigo.Text := Strzero(StrToInt(fldCodigo.Text), 5);
  If Not dsTemp.Dataset.Locate('codigo', fldCodigo.Text, []) Then
  Begin
    If formtipoCli.ShowModal = mrOk Then
    Begin
      Atualiza(dsTemp.Dataset, 1);
      dmMod.tblClientesData.Value := Date;
      dmMod.tblClientesTagFisica.Value := formtipoCli.rgOrdem.ItemIndex = 0;
      If formtipoCli.rgOrdem.ItemIndex = 0 Then
        DBEdit18.SetFocus
      Else
        DBEdit2.SetFocus;
    End;
  End;

end;

procedure TFormClientes.Button3Click(Sender: TObject);
begin
  FormConHistCliente := tformconHistCliente.Create(Application);
  FormConHistCliente.rxQuery1.DataSource := dsTemp;
  FormConHistCliente.ShowModal;
  FormConHistCliente.Release;
end;

procedure TFormClientes.DBEdit25Exit(Sender: TObject);
begin
  IF (dsTemp.State IN [dsEdit, dsInsert]) and (CheckBox1.Checked) Then
  Begin
    Query1.Close;
    Query1.Params[0].AsString := DBEdit25.Text;
    Query1.Open;
    If Query1.RecordCount > 0 Then
    Begin
      Atualiza(dsTemp.Dataset, 4);
      dmMod.tblClientes.Locate('cpf', Query1.FieldByNAme('cpf').AsString, []);
      fldCodigo.Text := dmMod.tblClientesCodigo.Value;
      ShowMessage('Cliente já cadastrado');
    End;
    Query1.Close;

  End;
  lValida := true;
  If CheckBox1.Checked Then
  begin
    If Not Cpf(DBEdit25.Text) Then
    Begin
      Mensagem('CPF Inválido');
      lValida := false;
    End;
  End;

end;

procedure TFormClientes.DBEdit11Exit(Sender: TObject);
begin
  lValida := true;
  If CheckBox1.Checked Then
  begin
    If Not CGC(DBEdit11.Text) Then
    Begin
      Mensagem('CNPJ Inválido');
      lValida := false;
    End;

  End;
end;

procedure TFormClientes.Button4Click(Sender: TObject);
begin
  if dmMod.tblClientes.State In [dsEdit, dsInsert] Then
  Begin
    Mensagem('Registro não pode está em modo inclusão/alteração');
    Exit;
  End;
  If Not FormPrincipal.Permissao('E1') Then
    Exit;
  If Not FormPrincipal.Permissao('E1') Then
    Exit;
  FormLanAvulso := TFormLanAvulso.Create(Application);
  FormLanAvulso.Tag := 1;
  FormLanAvulso.fldCodigoCliente.Text := dmMod.tblClientesCodigo.Value;
  FormLanAvulso.ShowModal;
  FormLanAvulso.Tag := 0;
  FormLanAvulso.Release;

end;

procedure TFormClientes.sbtGravarClick(Sender: TObject);
begin
  If dmMod.tblClientes.State In [dsInsert] Then
    dmMod.tblClientesCodigo.Value := Strzero(geracodigo('cliente'), 5);
  dmMod.tblClientesestado.Value := fldUf.Text;
  dmMod.tblClientescidade.Value := fldMunicipio.Text;
  Atualiza(dsTemp.Dataset, 2);
  Grava_carga(dmMod.tblClientesCodigo.Value, 'CLIENTE');
  fldTotReg.Caption := 'Nº de Clientes Cadastrados: ' + IntToStr
    (TotalReg(dmMod.tblClientes) - 1);
  fldCodigo.Text := dmMod.tblClientesCodigo.Value;
end;

procedure TFormClientes.Button5Click(Sender: TObject);
vAR
  Valor: String;
begin
  formRelfCliente := TFormRelFCliente.Create(Application);
  Valor := '0=0';
  With formRelfCliente Do
  begin
    rxQuery1.Close;
    IF confirma('Imprimir apenas ficha atual') = idYes Then
      Valor := 'Codigo=' + QuotedStr(dmMod.tblClientesCodigo.Value);
    rxQuery1.MacroByName('codigo').AsString := Valor;
    rxQuery1.Open;
    quickrep1.preview;
    Release;
  End;
end;

procedure TFormClientes.DBEdit18Exit(Sender: TObject);
begin
  DBGrid1.visible := false;
end;

procedure TFormClientes.DBEdit18KeyPress(Sender: TObject; var Key: Char);
begin
  If (Length(Trim(DBEdit18.Text)) > 0) and
    (dmMod.tblClientes.State in [dsInsert]) and (sbVerifica.Down) Then
  Begin
    If (Key in ['a' .. 'z']) Then
    Begin
      rxPesquisa.Close;
      rxPesquisa.Params[0].AsString := DBEdit18.Text;
      rxPesquisa.Open;
      DBGrid1.visible := not rxPesquisa.IsEmpty;
    End;
  End
  Else
    DBGrid1.visible := false;
end;

procedure TFormClientes.DBEdit2Exit(Sender: TObject);
begin
  DBGrid2.visible := false;

end;

procedure TFormClientes.sbVerifica1Click(Sender: TObject);
begin
  DBGrid2.visible := false;
  if (sbVerifica1.Down) and (DBEdit2.Text <> '') Then
  Begin
    rxPesquisa.Close;
    rxPesquisa.Params[0].AsString := DBEdit2.Text;
    rxPesquisa.Open;
    if rxPesquisa.IsEmpty Then
    begin
      ShowMessage('Nenhuma correspondência encontrada');
      sbVerifica1.Down := false;
    end
    else
      DBGrid2.visible := true;
  end;
end;

procedure TFormClientes.DBEdit2KeyPress(Sender: TObject; var Key: Char);
begin
  If (Length(Trim(DBEdit2.Text)) > 0) and
    (dmMod.tblClientes.State in [dsInsert]) and (sbVerifica1.Down) Then
  Begin
    If (Key in ['a' .. 'z']) Then
    Begin
      rxPesquisa.Close;
      rxPesquisa.Params[0].AsString := DBEdit2.Text;
      rxPesquisa.Open;
      DBGrid2.visible := not rxPesquisa.IsEmpty;
    End;
  End
  Else
    DBGrid2.visible := false;
end;

procedure TFormClientes.sbVerificaClick(Sender: TObject);
begin
  DBGrid1.visible := false;
  if (sbVerifica.Down) and (DBEdit18.Text <> '') Then
  Begin
    rxPesquisa.Close;
    rxPesquisa.Params[0].AsString := DBEdit18.Text;
    rxPesquisa.Open;
    if rxPesquisa.IsEmpty Then
    begin
      ShowMessage('Nenhuma correspondência encontrada');
      sbVerifica.Down := false;
    end
    else
      DBGrid1.visible := true;
  end;
end;

Procedure Grava_Imagem_webcam(Tabela: TTable; Campo: TBlobField; Foto: TImage;
  nomeFoto: string);
var
  BS: TBlobStream;
  MinhaImagem: TJPEGImage;
Begin
  // Dialog.InitialDir := '\sge';
  // Dialog.Execute;
  if nomeFoto <> '' Then
  Begin
    if not(Tabela.State in [dsEdit, dsInsert]) Then
      Tabela.Edit;
    BS := TBlobStream.Create((Campo as TBlobField), BMWRITE);
    MinhaImagem := TJPEGImage.Create;
    MinhaImagem.LoadFromFile(nomeFoto);
    MinhaImagem.SaveToStream(BS);
    Foto.Picture.Assign(MinhaImagem);
    BS.Free;
    MinhaImagem.Free;
    // Tabela.Post;
    // DBISaveChanges(Tabela.Handle);
  End;
End;

procedure TFormClientes.Button6Click(Sender: TObject);

  procedure ConverteParaJpeg(ACaminhoFoto: string);
  var
    cjBmp: TBitmap;
    cjJpg: TJPEGImage;
    strNomeSemExtensao: string;
    AFoto: TImage;
  begin
    AFoto := TImage.Create(FormPrincipal);
    AFoto.Parent := FormPrincipal;
    AFoto.visible := false;
    AFoto.Picture.Bitmap.LoadFromFile(ACaminhoFoto + '.bmp');

    cjJpg := TJPEGImage.Create;
    cjBmp := TBitmap.Create;

    cjBmp.Assign(AFoto.Picture.Bitmap);
    cjJpg.Assign(cjBmp);

    cjJpg.SaveToFile(ACaminhoFoto + '.jpg');
    DeleteFile(ACaminhoFoto + '.bmp');
    cjJpg.Free;
    cjBmp.Free;
    AFoto.Free;
  end;

begin
  fCaptura := TfCaptura.Create(Self);
  try
    with fCaptura, camCamera do
    begin
      if fCaptura.ShowModal = mrOk then
      begin
        CaptureImageDisque;
        ConverteParaJpeg('imagen');
        Grava_Imagem_webcam(dmMod.tblClientes, dmMod.tblClientesFoto, Image1,
          'imagen.jpg');

      end;
    end;
  finally
    FreeAndNil(fCaptura);
  end;

end;

End.
